# Security Monitoring and Reporting Workflow
# This workflow provides ongoing security monitoring and reporting

name: "Security Monitoring"

on:
  schedule:
    # Run every Monday at 9 AM UTC for weekly security reports
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      security_level:
        description: 'Security scan level'
        required: true
        default: 'standard'
        type: choice
        options:
        - standard
        - comprehensive
        - full

jobs:
  security-audit:
    name: Weekly Security Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      issues: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install security audit tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit pip-audit cyclonedx-bom

    - name: Install project dependencies
      run: |
        cd personal_finance_coach
        pip install -r requirements.txt

    - name: Generate Software Bill of Materials (SBOM)
      run: |
        cd personal_finance_coach
        cyclonedx-py requirements -o sbom.json
        echo "SBOM generated:"
        head -20 sbom.json

    - name: Run comprehensive security audit
      run: |
        cd personal_finance_coach
        echo "=== PIP AUDIT ===" > security-audit.txt
        pip-audit --format=json --output=pip-audit.json || true
        pip-audit >> security-audit.txt || true
        
        echo -e "\n=== SAFETY CHECK ===" >> security-audit.txt
        safety check >> security-audit.txt || true
        
        echo -e "\n=== BANDIT SCAN ===" >> security-audit.txt
        bandit -r . -ll >> security-audit.txt || true

    - name: Check for critical vulnerabilities
      id: check-critical
      run: |
        cd personal_finance_coach
        CRITICAL_COUNT=0
        
        # Check pip-audit results
        if [ -f pip-audit.json ]; then
          CRITICAL_COUNT=$(jq '[.vulnerabilities[] | select(.severity == "Critical")] | length' pip-audit.json 2>/dev/null || echo "0")
        fi
        
        echo "critical_vulnerabilities=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "::warning::Found $CRITICAL_COUNT critical vulnerabilities"
        fi

    - name: Create security report
      run: |
        cd personal_finance_coach
        cat > security-report.md << 'EOF'
        # Weekly Security Report
        
        **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Repository**: MLHDataHackfest25
        **Branch**: ${{ github.ref_name }}
        **Commit**: ${{ github.sha }}
        
        ## Summary
        
        - Critical vulnerabilities: ${{ steps.check-critical.outputs.critical_vulnerabilities }}
        - Scan completed: âœ…
        - SBOM generated: âœ…
        
        ## Tools Used
        
        - pip-audit: Python package vulnerability scanner
        - Safety: Python dependency security checker
        - Bandit: Python security linter
        - CycloneDX: Software Bill of Materials generator
        
        ## Detailed Results
        
        See attached security-audit.txt for full results.
        
        ## Recommendations
        
        1. Review and update dependencies regularly
        2. Monitor security advisories
        3. Keep development tools updated
        4. Follow secure coding practices
        
        ---
        *This report was generated automatically by GitHub Actions*
        EOF

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-${{ github.run_number }}
        path: |
          personal_finance_coach/security-audit.txt
          personal_finance_coach/security-report.md
          personal_finance_coach/sbom.json
          personal_finance_coach/pip-audit.json
        retention-days: 90

    - name: Create issue for critical vulnerabilities
      if: steps.check-critical.outputs.critical_vulnerabilities > 0
      uses: actions/github-script@v7
      with:
        script: |
          const criticalCount = ${{ steps.check-critical.outputs.critical_vulnerabilities }};
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `ðŸš¨ Critical Security Vulnerabilities Detected (${criticalCount} found)`,
            body: `# Security Alert
            
            **${criticalCount} critical vulnerabilities** were detected in the latest security scan.
            
            ## Action Required
            
            1. Review the security audit artifacts from this workflow run
            2. Update affected dependencies immediately
            3. Test the application after updates
            4. Close this issue once vulnerabilities are resolved
            
            ## Workflow Run
            
            - Run ID: ${{ github.run_id }}
            - Commit: ${{ github.sha }}
            - Date: ${new Date().toISOString()}
            
            ## Artifacts
            
            Download the security audit results from the workflow artifacts.
            `,
            labels: ['security', 'critical', 'bug']
          });

  dependency-graph:
    name: Update Dependency Graph
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Generate dependency graph
      run: |
        cd personal_finance_coach
        pip install pipdeptree
        pipdeptree --graph-output png > dependency-graph.png || true
        pipdeptree --json > dependency-tree.json || true

    - name: Upload dependency graph
      uses: actions/upload-artifact@v4
      with:
        name: dependency-graph
        path: |
          personal_finance_coach/dependency-graph.png
          personal_finance_coach/dependency-tree.json
        retention-days: 30
